{"version":3,"sources":["store/cocktails.js","App.js","Entry.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["initialState","cocktails","isDataFetching","bool","type","getCocktails","dispatch","fetch","then","response","json","error","console","log","receiveData","rootReducer","state","action","Object","assign","connect","bindActionCreators","dispatchGetCocktails","useEffect","RandDrink","drinks","strDrink","store","createStore","applyMiddleware","thunkMiddleware","Entry","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oSAAaA,EAAe,CAC1BC,UAAW,GACXC,gBAAgB,GAWZA,EAAiB,SAACC,GACtB,MAAO,CACLC,KAAK,mBACLD,SAKEE,EAAe,WACnB,OAAO,SAACC,GAEN,OADAA,EAASJ,GAAe,IACjBK,MAAM,0DACVC,MACC,SAAAC,GAAQ,OAAIA,EAASC,UACrB,SAAAC,GAAK,OAAIC,QAAQC,IAAI,qBAAsBF,MAE5CH,MAAK,SAAAE,GAAI,OACRJ,EAxBY,SAACI,GACnB,MAAO,CACLN,KAAM,gBACNH,UAAWS,GAqBEI,CAAYJ,OAEtBF,MAAK,WACJF,EAASJ,GAAe,SA0BjBa,EAfK,WAAmC,IAAlCC,EAAiC,uDAAzBhB,EAAciB,EAAW,uCACpD,OAAQA,EAAOb,MACb,IAAI,gBACF,OAAOc,OAAOC,OAAO,GAAIH,EAAO,CAC9Bf,UAAWgB,EAAOhB,YAEtB,IAAI,mBACF,OAAOiB,OAAOC,OAAO,GAAIH,EAAO,CAC9Bd,eAAgBe,EAAOd,OAE3B,QACE,OAAOa,IC3BEI,eARS,SAAAJ,GAAK,MAAK,CAChCf,UAAWe,EAAMf,cAGQ,SAAAK,GAAQ,OAAIe,YAAmB,CACxDC,qBAAsBjB,GACrBC,KAEYc,EAvBC,SAAC,GAAuC,IAAtCnB,EAAqC,EAArCA,UAAWqB,EAA0B,EAA1BA,qBAE3BC,qBAAU,WACRD,MACC,CAACA,IAEJ,IAAME,EAAYvB,EAAUwB,OAASxB,EAAUwB,OAAO,GAAGC,SAAW,UAEpE,OACE,6BACGF,M,OCRP,IAAMG,ECAGC,YACLb,EACAc,YAAgBC,MDQLC,EARD,WACZ,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QEAcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLC,QAAQD,MAAMA,EAAMoC,c","file":"static/js/main.1291d53f.chunk.js","sourcesContent":["export const initialState = {\n  cocktails: [],\n  isDataFetching: false\n}\n\n\nconst receiveData = (json) => {\n  return {\n    type: 'RECEIVE_POSTS',\n    cocktails: json\n  }\n}\n\nconst isDataFetching = (bool) => {\n  return {\n    type: `IS_DATA_FETCHING`,\n    bool\n  }\n}\n\n\nconst getCocktails = () => {\n  return (dispatch) => {\n    dispatch(isDataFetching(true))\n    return fetch(`https://www.thecocktaildb.com/api/json/v1/1/random.php`)\n      .then(\n        response => response.json(),\n        error => console.log('An error occurred.', error)\n      )\n      .then(json =>\n        dispatch(receiveData(json))\n      )\n      .then(()=>{\n        dispatch(isDataFetching(false))\n      })\n  }\n}\n\nexport {\n  getCocktails,\n  isDataFetching\n}\n\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case `RECEIVE_POSTS`:\n      return Object.assign({}, state, {\n        cocktails: action.cocktails\n      })\n    case `IS_DATA_FETCHING`:\n      return Object.assign({}, state, {\n        isDataFetching: action.bool\n      })\n    default:\n      return state\n  }\n}\n\nexport default rootReducer\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getCocktails } from './store/cocktails'\n\nconst Wrapper = ({cocktails, dispatchGetCocktails}) => {\n\n  useEffect(() => {\n    dispatchGetCocktails()\n  }, [dispatchGetCocktails])\n\n  const RandDrink = cocktails.drinks ? cocktails.drinks[0].strDrink : 'Loading'\n\n  return(\n    <div>\n      {RandDrink}\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({\n  cocktails: state.cocktails\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  dispatchGetCocktails: getCocktails,\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wrapper)","import React from 'react';\nimport './App.css';\nimport { Provider} from 'react-redux'\nimport App from './App'\n\nimport configureStore from './store/configureStore'\n\nconst store = configureStore()\n\nconst Entry = () => {\n  return (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  );\n}\n\nexport default Entry;\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from '../store/cocktails'\n\n\nexport default function configureStore() {\n  //Configure Redux Dev Tools\n  return createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware)\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Entry from './Entry';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Entry />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}