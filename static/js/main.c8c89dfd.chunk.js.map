{"version":3,"sources":["store/cocktails.js","Components/FilteredLiquor.js","Components/Home.js","App.js","Entry.js","serviceWorker.js","index.js","store/configureStore.js"],"names":["initialState","cocktails","isDataFetching","filteredList","filteredLists","bool","type","getRandomCocktails","dispatch","fetch","then","response","json","error","console","log","receiveRandomCocktail","getFilteredList","fetchUrl","receiveFilteredList","rootReducer","state","action","Object","assign","connect","bindActionCreators","dispatchGetFilteredList","listType","useEffect","displayList","drinks","map","displayElement","index","filterElement","strIngredient1","strGlass","key","to","Home","dispatchGetCocktails","RandDrink","strDrink","exact","path","component","render","props","Entry","store","Boolean","window","location","hostname","match","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c8c89dfd.chunk.js","sourcesContent":["export const initialState = {\n  cocktails: [],\n  isDataFetching: false,\n  filteredList: []\n}\n\nexport const filteredLists = {\n  INGREDIENT: 'ingredient',\n  GLASS: 'glass',\n  CATEGORY: 'category',\n  ALCOHOLIC: 'alcoholic'\n}\n\n//TODO MAKE NEW STATE FOR EACH TYPE OF FILTERED LIST\n\nconst receiveRandomCocktail = (json) => {\n  return {\n    type: 'RECEIVE_RANDOM_COCKTAIL',\n    cocktails: json\n  }\n}\n\nconst receiveFilteredList = (json) => {\n  return {\n    type: 'RECEIVE_FILTERED_LIST',\n    filteredList: json\n  }\n}\n\nconst isDataFetching = (bool) => {\n  return {\n    type: `IS_DATA_FETCHING`,\n    bool\n  }\n}\n\n\nconst getRandomCocktails = () => {\n  return (dispatch) => {\n    dispatch(isDataFetching(true))\n    return fetch(`https://www.thecocktaildb.com/api/json/v1/1/random.php`)\n      .then(\n        response => response.json(),\n        error => console.log('Failed to fetch Random Drink', error)\n      )\n      .then(json =>\n        dispatch(receiveRandomCocktail(json))\n      )\n      .then(() => {\n        dispatch(isDataFetching(false))\n      })\n  }\n}\n\nconst getFilteredList = (type) => {\n  let fetchUrl\n  if(type === filteredLists.INGREDIENT){\n    fetchUrl = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?i=list'\n  } else if (type === filteredLists.GLASS){\n    fetchUrl = 'https://www.thecocktaildb.com/api/json/v1/1/list.php?g=list'\n  } else {\n    console.log('OOOOPS')\n  }\n  return (dispatch) => {\n    dispatch(isDataFetching(true))\n    return fetch(fetchUrl)\n    .then(\n      response => response.json(),\n      error => console.log('Failed to fetch ingredient List', error)\n    )\n    .then(json => {\n        dispatch(receiveFilteredList(json))\n    })\n    .then(() => {\n      dispatch(isDataFetching(false))\n    })\n  }\n}\n\nexport {\n  getRandomCocktails,\n  isDataFetching,\n  getFilteredList\n}\n\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case `RECEIVE_RANDOM_COCKTAIL`:\n      return Object.assign({}, state, {\n        cocktails: action.cocktails\n      })\n    case `RECEIVE_FILTERED_LIST`:\n      return Object.assign({}, state, {\n        filteredList: action.filteredList\n      })\n    case `IS_DATA_FETCHING`:\n      return Object.assign({}, state, {\n        isDataFetching: action.bool\n      })\n    default:\n      return state\n  }\n}\n\nexport default rootReducer\n","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getFilteredList } from '../store/cocktails'\nimport {\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst FilteredList = ({listType, filteredList, dispatchGetFilteredList}) => {\n\n  useEffect(() => {\n    dispatchGetFilteredList(listType)\n  }, [dispatchGetFilteredList, listType])\n\n  const displayList = filteredList.drinks ? filteredList.drinks : ['Loading']\n\n  console.log(displayList)\n\n  return(\n    <Route>\n      {displayList[0] && displayList.map((displayElement, index) => {\n        const filterElement = displayElement.strIngredient1 || displayElement.strGlass\n        return(\n          <div key={index}>\n            <Link to={`/${filterElement}`}>\n              {filterElement}\n            </Link>\n          </div>\n        )\n      })}\n    </Route>\n  )\n}\n\nconst mapStateToProps = state => ({\n  filteredList: state.filteredList\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  dispatchGetFilteredList: getFilteredList,\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilteredList)","import React from 'react'\nimport {\n  Route,\n  Link\n} from \"react-router-dom\";\n\nconst Home = () => {\n  return(\n    <Route>\n      <Link to='filteredLiquor'> Filter By Liquor </Link>\n      <Link to='filteredGlass'> Filter By Glass </Link>\n    </Route>\n  )\n}\n\nexport default Home","import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport FilteredList from './Components/FilteredLiquor'\nimport Home from './Components/Home'\nimport {\n  Route,\n  Switch\n} from \"react-router-dom\"\n\nimport { bindActionCreators } from 'redux'\nimport { getRandomCocktails, filteredLists } from './store/cocktails'\n\nconst Wrapper = ({cocktails, dispatchGetCocktails}) => {\n\n  useEffect(() => {\n    dispatchGetCocktails()\n  }, [dispatchGetCocktails])\n\n  const RandDrink = cocktails.drinks ? cocktails.drinks[0].strDrink : 'Loading'\n  console.log(RandDrink)\n\n  return(\n    <Switch>\n      <Route exact path='/' component={Home} />\n      <Route \n        path='/filteredLiquor' \n        render={(props) => <FilteredList listType={filteredLists.INGREDIENT} />}\n      />\n      <Route \n        path='/filteredGlass' \n        render={(props) => <FilteredList listType={filteredLists.GLASS} />}\n      />\n    </Switch>\n  )\n}\n\nconst mapStateToProps = state => ({\n  cocktails: state.cocktails\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  dispatchGetCocktails: getRandomCocktails,\n}, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wrapper)","import React from 'react';\nimport './App.css';\nimport { Provider} from 'react-redux'\nimport App from './App'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\n\nconst Entry = ({ store }) => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  );\n}\n\nexport default Entry;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Entry from './Entry';\nimport configureStore from './store/configureStore'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore()\n\nReactDOM.render(<Entry store={store} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport rootReducer from '../store/cocktails'\n\n\nexport default function configureStore() {\n  //Configure Redux Dev Tools\n  return createStore(\n    rootReducer,\n    applyMiddleware(thunkMiddleware)\n  )\n}"],"sourceRoot":""}